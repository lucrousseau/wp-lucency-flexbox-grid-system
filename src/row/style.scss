@use "sass:math";

$columns: 12;

$xxl: 1400px;
$xl: 1200px;
$lg: 992px;
$md: 768px;
$sm: 576px;
$xs: 480px;

:root {
	--gap: 1em;
	--columns: #{$columns};
}

$breakpoints: (
	full: null,
	xxl: $xxl,
	xl: $xl,
	lg: $lg,
	md: $md,
	sm: $sm,
	xs: $xs,
);

@mixin respondTo($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@if $breakpoint == "full" {
			@content;
		} @else {
			@media (max-width: map-get($breakpoints, $breakpoint)) {
				@content;
			}
		}
	} @else {
		@warn "Unknown breakpoint: #{$breakpoint}.";
	}
}

@function findPreviousBreakepoint($prefix, $return: "prefix") {
	$previousPrefix: null;
	$previousBreakpoint: null;

	@if $prefix == "full" {
		@return null;
	}

	@each $currentPrefix, $currentBreakpoint in $breakpoints {
		@if $currentPrefix == $prefix and $previousPrefix != null {
			@if $return == "prefix" {
				@return getPrefix($previousPrefix);
			} @else {
				@return $previousBreakpoint;
			}
		}

		$previousPrefix: $currentPrefix;
		$previousBreakpoint: $currentBreakpoint;
	}

	@return null;
}

@function getPrefix($prefix: "") {
	@return if($prefix == "" or $prefix == "full", "", "#{$prefix}-");
}

@mixin colwidth($size, $prefix: "") {
	$prefix: getPrefix($prefix);

	&.col--#{$prefix}#{$size} {
		$calc: calc(
			((100% / #{$columns}) * #{$size}) -
				(var(--gap) * #{1 - math.div(1, $columns) * $size})
		);

		flex: 0 0 $calc;
		max-width: $calc;
	}
}

.row {
	display: flex;
	flex-wrap: wrap;
	gap: var(--gap);

	$marginPadding: (
		"margin": (
			top,
			right,
			bottom,
			left,
		),
		"padding": (
			top,
			right,
			bottom,
			left,
		),
	);

	$flexProperties: (
		"flex": (
			"prop": "display",
			"values": (
				("", "flex"),
				("inline", "inline-flex"),
			),
		),
		"direction": (
			"prop": "flex-direction",
			"values": (
				("row", "row"),
				("row-reverse", "row-reverse"),
				("column", "column"),
				("column-reverse", "column-reverse"),
			),
		),
		"flex-wrap": (
			"prop": "flex-wrap",
			"values": (
				("", "wrap"),
				("wrap-reverse", "wrap-reverse"),
				("nowrap", "nowrap"),
			),
		),
		"justify": (
			"prop": "justify-content",
			"values": (
				("normal", "normal"),
				("start", "flex-start"),
				("end", "flex-end"),
				("center", "center"),
				("between", "space-between"),
				("around", "space-around"),
				("evenly", "space-evenly"),
				("stretch", "stretch"),
			),
		),
		"items": (
			"prop": "align-items",
			"values": (
				("start", "flex-start"),
				("end", "flex-end"),
				("center", "center"),
				("baseline", "baseline"),
				("stretch", "stretch"),
			),
		),
		"content": (
			"prop": "align-content",
			"values": (
				("normal" "normal"),
				("center", "center"),
				("flex-start", "flex-start"),
				("flex-end", "flex-end"),
				("space-between", "space-between"),
				("space-around", "space-around"),
				("space-evenly", "space-evenly"),
				("baseline", "baseline"),
				("stretch", "stretch"),
			),
		),
	);

	@each $prefix, $breakpoint in $breakpoints {
		@include respondTo($prefix) {
			$prefix: getPrefix($prefix);
			@each $key, $value in $flexProperties {
				$prop: map-get($value, prop);
				$values: map-get($value, values);

				@each $valueKey, $actualValue in $values {
					&--#{$prefix}#{$key}-#{$valueKey} {
						#{$prop}: $actualValue;
					}
				}
			}
		}
	}

	@each $prefix, $breakpoint in $breakpoints {
		@include respondTo($prefix) {
			$previousPrefix: findPreviousBreakepoint($prefix);
			$prefix: getPrefix($prefix);

			@each $property, $directions in $marginPadding {
				$values: ();

				@each $direction in $directions {
					$previousBreakpoint: if(
						$prefix == "",
						0,
						var(--get-#{$previousPrefix}#{$property}-#{$direction})
					);

					--get-#{$prefix}#{$property}-#{$direction}: var(
						--#{$prefix}#{$property}-#{$direction},
						#{$previousBreakpoint}
					);

					$value: var(
						--get-#{$prefix}#{$property}-#{$direction},
						#{$previousBreakpoint}
					);
					$values: append($values, $value, space);
				}

				#{$property}: $values;
			}
		}
	}

	> .col {
		flex: 1;
		position: relative;

		/*
		align-self: auto | flex-start | flex-end | center | baseline | stretch
		*/

		@for $i from 1 through $columns {
			@include colwidth($i);
		}

		@each $prefix, $breakpoint in $breakpoints {
			@for $i from 1 through $columns {
				@include respondTo($prefix) {
					@include colwidth($i, $prefix);
				}
			}
		}
	}
}

@use "sass:math";

@mixin lucencySetMediaQueryBreakpoints($breakpoints, $prefix) {
	@if map-has-key($breakpoints, $prefix) {
		@if $prefix == "full" {
			@content;
		} @else {
			@media (max-width: map-get($breakpoints, $prefix)) {
				@content;
			}
		}
	} @else {
		@warn "Unknown breakpoint: #{$prefix}.";
	}
}

@mixin lucencySetResponsiveStyles($breakpoints) {
	@each $currentPrefix, $breakAt in $breakpoints {
		$prefix: lucencyGetPrefix($currentPrefix);

		@include lucencySetMediaQueryBreakpoints($breakpoints, $currentPrefix) {
			@content ($currentPrefix, $prefix);
		}
	}
}

@function lucencyGetPrefix($prefix) {
	@return if($prefix == "" or $prefix == "full", "", "--#{$prefix}");
}

@function lucencyGetPreviousPrefix($breakpoints, $prefix) {
	$previousPrefix: null;
	$previousBreakpoint: null;

	@if $prefix == "full" {
		@return null;
	}

	@each $currentPrefix, $breakAt in $breakpoints {
		@if $currentPrefix == $prefix and $previousPrefix != null {
			@return lucencyGetPrefix($previousPrefix);
		}

		$previousPrefix: $currentPrefix;
	}

	@return null;
}

@mixin lucencySetColsWidth($prefix, $columns, $slug) {
	@if ($prefix == "") {
		flex: 1;
	}

	@for $size from 1 through $columns {
		&.#{$slug}-col-#{$size}#{$prefix} {
			$calc: calc(
				((100% / #{$columns}) * #{$size}) -
					(var(--gg#{$prefix}) * #{1 - math.div(1, $columns) * $size})
			);

			flex: 0 0 $calc;
			max-width: $calc;
		}
	}
}

@mixin lucencyAddCSSClasses($classes, $prefix) {
	@each $key, $value in $classes {
		$prop: map-get($value, prop);
		$values: map-get($value, values);

		@each $valueKey, $actualValue in $values {
			@if ($valueKey != "") {
				$valueKey: "-#{$valueKey}";
			}

			&.#{$key}#{$valueKey}#{$prefix} {
				#{$prop}: $actualValue;
			}
		}
	}
}

@mixin lucencyAddMarginPadding(
	$marginPadding,
	$breakpoints,
	$currentPrefix,
	$prefix
) {
	$previousPrefix: lucencyGetPreviousPrefix($breakpoints, $currentPrefix);

	@each $property, $directions in $marginPadding {
		$values: ();

		@each $direction in $directions {
			$p: str-slice($property, 1, 1);
			$d: str-slice($direction, 1, 1);

			$previousBreakpoint: if(
				$prefix == "",
				0,
				var(--g#{$p}#{$d}#{$previousPrefix})
			);

			--g#{$p}#{$d}#{$prefix}: var(
				--#{$property}-#{$direction}#{$prefix},
				#{$previousBreakpoint}
			);

			$value: var(--g#{$p}#{$d}#{$prefix}, #{$previousBreakpoint});

			$values: append($values, $value, space);
		}

		#{$property}: $values;
	}
}

@mixin lucencySetGap($breakpoints, $currentPrefix, $prefix) {
	$previousPrefix: lucencyGetPreviousPrefix($breakpoints, $currentPrefix);

	$previousBreakpoint: if($prefix == "", 1rem, var(--gg#{$previousPrefix}));

	--gg#{$prefix}: var(--gap#{$prefix}, #{$previousBreakpoint});

	gap: var(--gg#{$prefix}, #{$previousBreakpoint});
}

@mixin lucencyBuildGrid(
	$slug: "lucency",
	$columns: 12,
	$breakpoints: (
		full: null,
		xxl: 1400px,
		xl: 1200px,
		lg: 992px,
		md: 768px,
		sm: 576px,
		xs: 480px,
	)
) {
	.#{$slug} {
		@include lucencySetResponsiveStyles($breakpoints) using
			($currentPrefix, $prefix) {
			@include lucencyAddMarginPadding(
				(
					"margin": (
						top,
						right,
						bottom,
						left,
					),
					"padding": (
						top,
						right,
						bottom,
						left,
					),
				),
				$breakpoints,
				$currentPrefix,
				$prefix
			);

			@include lucencyAddCSSClasses(
				(
					"#{$slug}": (
						"prop": "display",
						"values": (
							("flex", flex),
							("inline-flex", inline-flex),
						),
					),
					"#{$slug}-flex": (
						"prop": "flex-direction",
						"values": (
							("row", row),
							("row-reverse", row-reverse),
							("column", column),
							("column-reverse", column-reverse),
						),
					),
					"#{$slug}-flex-wrap": (
						"prop": "flex-wrap",
						"values": (
							("", wrap),
							("wrap-reverse", wrap-reverse),
							("nowrap", nowrap),
						),
					),
					"#{$slug}-justify": (
						"prop": "justify-content",
						"values": (
							("normal", normal),
							("start", flex-start),
							("end", flex-end),
							("center", center),
							("between", space-between),
							("around", space-around),
							("evenly", space-evenly),
							("stretch", stretch),
						),
					),
					"#{$slug}-items": (
						"prop": "align-items",
						"values": (
							("start", flex-start),
							("end", flex-end),
							("center", center),
							("baseline", baseline),
							("stretch", stretch),
						),
					),
					"#{$slug}-content": (
						"prop": "align-content",
						"values": (
							("normal" normal),
							("center", center),
							("flex-start", flex-start),
							("flex-end", flex-end),
							("space-between", space-between),
							("space-around", space-around),
							("space-evenly", space-evenly),
							("baseline", baseline),
							("stretch", stretch),
						),
					),
				),
				$prefix
			);
		}

		&-flex,
		&-inline-flex {
			@include lucencySetResponsiveStyles($breakpoints) using
				($currentPrefix, $prefix) {
				@include lucencySetGap($breakpoints, $currentPrefix, $prefix);
			}
		}

		&-col {
			@include lucencySetResponsiveStyles($breakpoints) using
				($currentPrefix, $prefix) {
				@include lucencySetColsWidth($prefix, $columns, $slug);

				@include lucencyAddCSSClasses(
					(
						"#{$slug}-self": (
							"prop": "align-self",
							"values": (
								("auto", auto),
								("start", flex-start),
								("end", flex-end),
								("center", center),
								("stretch", stretch),
								("baseline", baseline),
							),
						),
					),
					$prefix
				);
			}
		}

		&-align {
			@include lucencySetResponsiveStyles($breakpoints) using
				($currentPrefix, $prefix) {
				&-left#{$prefix} {
					text-align: left;
				}
				&-center#{$prefix} {
					text-align: center;
				}
				&-right#{$prefix} {
					text-align: right;
				}
			}
		}
	}
}

@include lucencyBuildGrid();

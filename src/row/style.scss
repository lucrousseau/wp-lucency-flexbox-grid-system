@use "sass:math";

$columns: 12;

$xxl: 1400px;
$xl: 1200px;
$lg: 992px;
$md: 768px;
$sm: 576px;
$xs: 480px;

$breakpoints: (
	full: null,
	xxl: $xxl,
	xl: $xl,
	lg: $lg,
	md: $md,
	sm: $sm,
	xs: $xs,
);

@mixin respondTo($breakpoint) {
	@if map-has-key($breakpoints, $breakpoint) {
		@if $breakpoint == "full" {
			@content;
		} @else {
			@media (max-width: map-get($breakpoints, $breakpoint)) {
				@content;
			}
		}
	} @else {
		@warn "Unknown breakpoint: #{$breakpoint}.";
	}
}

@function findPreviousBreakepoint($prefix, $return: "prefix") {
	$previousPrefix: null;
	$previousBreakpoint: null;

	@if $prefix == "full" {
		@return null;
	}

	@each $currentPrefix, $currentBreakpoint in $breakpoints {
		@if $currentPrefix == $prefix and $previousPrefix != null {
			@if $return == "prefix" {
				@return getPrefix($previousPrefix);
			} @else {
				@return $previousBreakpoint;
			}
		}

		$previousPrefix: $currentPrefix;
		$previousBreakpoint: $currentBreakpoint;
	}

	@return null;
}

@function getPrefix($prefix: "") {
	@return if($prefix == "" or $prefix == "full", "", "--#{$prefix}");
}

@mixin colwidth($size, $prefix: "") {
	$prefix: getPrefix($prefix);

	&.lucency-col-#{$size}#{$prefix} {
		$calc: calc(
			((100% / #{$columns}) * #{$size}) -
				(var(--get-gap#{$prefix}) * #{1 - math.div(1, $columns) * $size})
		);

		flex: 0 0 $calc;
		max-width: $calc;
	}
}

@mixin addClasses($classes) {
	@each $prefix, $breakpoint in $breakpoints {
		@include respondTo($prefix) {
			$prefix: getPrefix($prefix);

			@each $key, $value in $classes {
				$prop: map-get($value, prop);
				$values: map-get($value, values);

				@each $valueKey, $actualValue in $values {
					@if ($valueKey != "") {
						$valueKey: "-#{$valueKey}";
					}

					.#{$key}#{$valueKey}#{$prefix} {
						#{$prop}: $actualValue;
					}
				}
			}
		}
	}
}

@mixin directions($marginPadding) {
	@each $prefix, $breakpoint in $breakpoints {
		@include respondTo($prefix) {
			$previousPrefix: findPreviousBreakepoint($prefix);
			$prefix: getPrefix($prefix);

			@each $property, $directions in $marginPadding {
				$values: ();

				@each $direction in $directions {
					$previousBreakpoint: if(
						$prefix == "",
						0,
						var(--get-#{$property}-#{$direction}#{$previousPrefix})
					);

					--get-#{$property}-#{$direction}#{$prefix}: var(
						--#{$property}-#{$direction}#{$prefix},
						#{$previousBreakpoint}
					);

					$value: var(
						--get-#{$property}-#{$direction}#{$prefix},
						#{$previousBreakpoint}
					);
					$values: append($values, $value, space);
				}

				#{$property}: $values;
			}
		}
	}
}

@mixin gap() {
	@each $prefix, $breakpoint in $breakpoints {
		@include respondTo($prefix) {
			$previousPrefix: findPreviousBreakepoint($prefix);
			$prefix: getPrefix($prefix);

			$previousBreakpoint: if(
				$prefix == "",
				1rem,
				var(--get-gap#{$previousPrefix})
			);

			--get-gap#{$prefix}: var(--gap#{$prefix}, #{$previousBreakpoint});

			gap: var(--get-gap#{$prefix}, #{$previousBreakpoint});
		}
	}
}

@include addClasses(
	(
		"lucency": (
			"prop": "display",
			"values": (
				("flex", flex),
				("inline-flex", inline-flex),
			),
		),
		"lucency-flex": (
			"prop": "flex-direction",
			"values": (
				("row", row),
				("row-reverse", row-reverse),
				("column", column),
				("column-reverse", column-reverse),
			),
		),
		"lucency-flex-wrap": (
			"prop": "flex-wrap",
			"values": (
				("", wrap),
				("wrap-reverse", wrap-reverse),
				("nowrap", nowrap),
			),
		),
		"lucency-justify": (
			"prop": "justify-content",
			"values": (
				("normal", normal),
				("start", flex-start),
				("end", flex-end),
				("center", center),
				("between", space-between),
				("around", space-around),
				("evenly", space-evenly),
				("stretch", stretch),
			),
		),
		"lucency-items": (
			"prop": "align-items",
			"values": (
				("start", flex-start),
				("end", flex-end),
				("center", center),
				("baseline", baseline),
				("stretch", stretch),
			),
		),
		"lucency-content": (
			"prop": "align-content",
			"values": (
				("normal" normal),
				("center", center),
				("flex-start", flex-start),
				("flex-end", flex-end),
				("space-between", space-between),
				("space-around", space-around),
				("space-evenly", space-evenly),
				("baseline", baseline),
				("stretch", stretch),
			),
		),
	)
);

@include addClasses(
	(
		"lucency-self": (
			"prop": "align-self",
			"values": (
				("auto", auto),
				("start", flex-start),
				("end", flex-end),
				("center", center),
				("stretch", stretch),
				("baseline", baseline),
			),
		),
	)
);

.lucency {
	@include directions(
		(
			"margin": (
				top,
				right,
				bottom,
				left,
			),
			"padding": (
				top,
				right,
				bottom,
				left,
			),
		)
	);

	&-flex,
	&-inline-flex {
		@include gap();
	}
	&-col {
		flex: 1;
		@each $prefix, $breakpoint in $breakpoints {
			@for $i from 1 through $columns {
				@include respondTo($prefix) {
					@include colwidth($i, $prefix);
				}
			}
		}
	}
	&-align {
		@each $prefix, $breakpoint in $breakpoints {
			@include respondTo($prefix) {
				$prefix: getPrefix($prefix);

				&-left#{$prefix} {
					text-align: left;
				}
				&-center#{$prefix} {
					text-align: center;
				}
				&-right#{$prefix} {
					text-align: right;
				}
			}
		}
	}
}
